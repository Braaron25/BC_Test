trigger: none

pool:
  name: 'default'


jobs:
- job: Build
  timeoutInMinutes: 300
  variables:
    build.clean: all
    platform: x64
    version: 'ci'
    appVersion: '1.0'
    appBuild: $(Build.BuildID)
    appRevision: 0
    skipComponentGovernanceDetection: True

  steps:
  - task: PowerShell@2
    displayName: 'Update app dependencies'
    env: 
      BCEnvironment: '$(BCEnvironment)'
    inputs:
      targetType: filePath
      filePath: 'scripts\GetDependenciesVersion.ps1'
      failOnStderr: true

  - task: PowerShell@2
    displayName: 'Set BuildNumber'
    inputs:
      targetType: inline
      script: 'Write-Host "##vso[build.updatebuildnumber]$(appVersion).$(appBuild).$(appRevision)"'

  - task: PowerShell@2
    displayName: 'Run Pipeline'
    env:
      InsiderSasToken: '$(InsiderSasToken)'
      LicenseFile: '$(LicenseFile)'
      CodeSignCertPfxFile: '$(CodeSignCertPfxFile)'
      CodeSignCertPfxPassword: '$(CodeSignCertPfxPassword)'
      ClientId: '$(ClientId)'
      TenantId: '$(TenantId)'
      ClientSecret: '$(ClientSecret)'
      BCEnvironment: '$(BCEnvironment)'
      ProEnv: '$(ProEnv)'
    inputs:
      targetType: filePath
      filePath: 'scripts\DevOps-Pipeline.ps1'
      arguments: '-environment "AzureDevOps" -version "$(version)" -appBuild $(appBuild) -appRevision $(appRevision)'
      failOnStderr: true

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: and(succeeded(),ne(variables['TestResults'],''))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '$(testResults)'
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: output

  - task: PowerShell@2
    displayName: 'Update config dependencies'
    env: 
      BCEnvironment: '$(BCEnvironment)'
    inputs:
      targetType: filePath
      filePath: 'scripts\UpdateDependencieVersion.ps1'
      arguments: '-appVersion "$(appVersion).$(appBuild).$(appRevision)"'
      failOnStderr: true

  # - task: PowerShell@2
  #   displayName: 'Publis to Production'
  #   env:
  #     ClientId: '$(ClientId)'
  #     TenantId: '$(TenantId)'
  #     ClientSecret: '$(ClientSecret)'
  #     ProEnv: '$(ProEnv)'
  #   inputs:
  #     targetType: filePath
  #     filePath: 'scripts\Publish-to-Production.ps1'
  #     failOnStderr: true

  - task: PowerShell@2
    displayName: 'Cleanup'
    condition: always()
    inputs:
      targetType: filePath
      filePath: 'scripts\Cleanup.ps1'
      arguments: '-environment "AzureDevOps"'
      failOnStderr: false
